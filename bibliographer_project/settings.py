# bibliographer_project/settings.py
"""
Django settings for bibliographer_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import dj_database_url
import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-_zpdo2j0bm7rh3$3(80y8kyx4w!a(ea=gx%bpurrd%^)5n3d4#') # Use a strong, generated key in production

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True' # Read DEBUG from environment variable

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "research_assistant", # Make sure your app is here
    
    # Allauth apps for user authentication
    "django.contrib.sites", # Required by allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google", # For Google Sign-in
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware", # For serving static files in production
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Allauth middleware: Add the account middleware below the authentication middleware
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "bibliographer_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR/'templates'], # Project-wide templates directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` needs this from django.template.context_processors.request for its templates
                # 'allauth.account.context_processors.account',
                # 'allauth.socialaccount.context_processors.socialaccount',
            ],
        },
    },
]

WSGI_APPLICATION = "bibliographer_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use dj-database-url to parse the DATABASE_URL environment variable provided by Render
DATABASE_URL = os.environ.get("DATABASE_URL")
if DATABASE_URL:
    DATABASES = {
        "default": dj_database_url.config(default=DATABASE_URL, conn_max_age=600)
    }
else:
    # Fallback to local PostgreSQL for local development if DATABASE_URL is not set
    # Ensure you have PostgreSQL running locally and the database/user are created.
    # Example for local PostgreSQL (adjust as needed for your setup)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "ai_bibliographer_db", # Your local PostgreSQL database name
            "USER": "postgres",        # Your local PostgreSQL user
            "PASSWORD": "ashwin", # Your local PostgreSQL password
            "HOST": "localhost",           # Or your PostgreSQL host IP
            "PORT": "5432",                # Default PostgreSQL port
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/" # This is the URL prefix for serving static files
STATIC_ROOT = BASE_DIR / "staticfiles" # This is the directory where collectstatic gathers files

STORAGES ={
    "staticfiles":{"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"},
}

# CSRF_TRUSTED_ORIGINS for Render deployment
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'http://localhost:8000').split(',')

# Append Render's default domain if not in debug mode
if not DEBUG:
    ALLOWED_HOSTS.append('.render.com')
    CSRF_TRUSTED_ORIGINS.append('https://*.render.com')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Allauth settings
SITE_ID = 1 # Required for django-allauth. After running migrations, go to Django Admin and configure Site object.
LOGIN_REDIRECT_URL = '/research/' # Redirect to research app after successful login
ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/' # Redirect to login page after logout
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False # Users will sign up/log in with email
ACCOUNT_AUTHENTICATION_METHOD = 'email' # Allow login with email
ACCOUNT_EMAIL_VERIFICATION = 'none' # 'mandatory' or 'optional' for production, 'none' for quick dev

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django Admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Google Social Account settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET'),
            'key': '' # not needed for Google
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
        },
        'VERIFIED_EMAIL': True,
    }
}


# API Keys from environment variables
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")
SERPAPI_API_KEY = os.getenv("SERPAPI_API_KEY")
EXA_API_KEY = os.getenv("EXA_API_KEY")
SCRAPERAPI_API_KEY = os.getenv("SCRAPERAPI_API_KEY")

# Redis configuration for Django's cache/session backend (ONLY if REDIS_URL is provided by Render)
REDIS_URL = os.getenv("REDIS_URL") # For Render's managed Redis
if REDIS_URL:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "CONNECTION_POOL_KWARGS": {"ssl_cert_reqs": None}, # Required for some Redis deployments like Upstash
            }
        }
    }
    # Use Redis for sessions
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"
# If REDIS_URL is not set (e.g., local development), Django will use its default DB session backend.
